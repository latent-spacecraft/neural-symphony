# Neural Symphony - Test Dockerfile (CPU-only for faster testing)
# Use this for build testing without GPU requirements

# Stage 1: Node.js Backend
FROM node:18-alpine as backend

WORKDIR /app

# Copy package files and install dependencies
COPY package.json ./
RUN npm install --omit=dev

# Copy backend source
COPY src/backend/ ./src/backend/
COPY src/api/ ./src/api/
COPY src/websocket/ ./src/websocket/
COPY src/utils/ ./src/utils/

# Stage 2: React Frontend Build  
FROM node:18-alpine as frontend-build

WORKDIR /app

# Copy frontend package files
COPY src/frontend/package.json ./

# Install dependencies with legacy peer deps flag
RUN npm install --legacy-peer-deps --production=false

# Copy frontend source (excluding problematic files)
COPY src/frontend/src ./src/
COPY src/frontend/public ./public/
COPY src/frontend/tailwind.config.js ./
COPY src/frontend/postcss.config.js ./

# Build frontend with memory optimization
ENV NODE_OPTIONS="--max_old_space_size=4096"
RUN npm run build

# Stage 3: Production Image (CPU-only)
FROM node:18-alpine

# Install Python for AI backend
RUN apk add --no-cache python3 py3-pip nginx supervisor curl

WORKDIR /app

# Copy Node.js backend
COPY --from=backend /app/node_modules /app/node_modules
COPY --from=backend /app/src /app/src
COPY --from=backend /app/package.json /app/

# Copy frontend build
COPY --from=frontend-build /app/build /app/frontend/build

# Create directories
RUN mkdir -p /app/models /app/logs /var/log/supervisor

# Copy configs
COPY docker/nginx.conf /etc/nginx/http.d/default.conf
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Copy startup scripts
COPY docker/start-node-backend.sh /app/start-node-backend.sh
RUN chmod +x /app/start-*.sh

# Environment
ENV NODE_ENV=production
ENV PORT=80

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start nginx only (for testing)
CMD ["nginx", "-g", "daemon off;"]